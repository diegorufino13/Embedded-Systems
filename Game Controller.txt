/*
Diego Rufino
Date: 8/8/2023
Assignment: Lab 5 - Game Controller
Youtube: https://youtu.be/MkMFvQr0X5A
rufino_diego_lab5
*/



#include <msp430.h>
#include <stdbool.h>
#include <stdint.h>


void initUART();
void initClock();
void init();
void initADC();
void write(unsigned int data);
unsigned int readingADC();


int main(void)
{
    init();
    initADC();
    initClock();
    initUART();


    while(1){
        if((!(P4IN & BIT1)) || (!(P2IN & BIT3)))
            write(255);
        write(readingADC());
    }
}

///////////////////////////////////////////////////////////
unsigned int readingADC(){
    ADCCTL0 |= ADCENC | ADCSC;
    while(ADCCTL1 & ADCBUSY);
    return (unsigned int)((254.0/4095.0) * ((float)ADCMEM0));
}
//////////////////////////////////////////// 595
void initUART(){
   // Configure UART pins
   P4SEL0 |= BIT3 | BIT2; // set 2-UART pin as second function
   P4SEL1 &= ~(BIT3 | BIT2);

   // Configure UART
   UCA1CTLW0 = UCSWRST; // Hold UART in reset state
   UCA1CTLW0 |= UCSSEL__ACLK | UCPEN_0 | UCSPB_0 | UC7BIT_0; // CLK = ACLK

   // Baud Rate calculation
   // 32768/(9600) = 3.4133
   // Fractional portion = 0.4133
   // User's Guide Table 17-4: 0x92
   UCA1BR0 = 3; // 32768/9600
   UCA1BR1 = 0;
   UCA1MCTLW |= 0x9200; //0x9200 is UCBRSx = 0x92
   UCA1CTLW0 &= ~UCSWRST; // Release reset state for operation
   UCA1IE |= UCRXIE; // Enable USCI_A0 RX interrupt
}
//////////////////////////////////////////////////
void initClock(){
    // Set XT1CLK as ACLK source
    CSCTL4 |= SELA__XT1CLK;
    // Use external clock in low-frequency mode
    CSCTL6 |= XT1BYPASS_1 | XTS_0;
    // Use clock divider value of 1
    CSCTL5 |= DIVM_0;
}
///////////////////////////////////////////////////
void write(unsigned int data){
    while(!(UCA1IFG & UCTXIFG));
    UCA1TXBUF = data;
}

/////////////////////////////////////////////////////////
void init(){
    WDTCTL = WDTPW | WDTHOLD;
    PM5CTL0 &= ~LOCKLPM5;

    //Button 4.1 SW1
   P4DIR &= ~BIT1; //sets P4.1 as input 0
   P4REN |= BIT1; //Enables P4.1 pull up resistor
   P4OUT |= BIT1; //sets bit 1 as high to configure pull-up

   //Button 2.3 SW2
   P2DIR &= ~BIT3;
   P2REN |= BIT3;
   P2OUT |= BIT3;
}
/////////////////////////////////////////////////////////
void initADC(){

    // Configure ADC12
    ADCCTL0 |= ADCSHT_2 | ADCON; // ADCON, S&H=16 ADC clks
    ADCCTL1 |= ADCSHP; // ADCCLK = MODOSC; sampling timer
    ADCCTL2 &= ~ADCRES;
    ADCCTL2 |= ADCRES_2;
    ADCMCTL0 |= ADCINCH_1 | ADCSREF_0; // internal channel 1 select; Vref=3.3V
}
